@model Intranet.Models.DashboardViewModel
@using Intranet.Models 
@using System.Linq    
@using System.Security.Claims 

@{
    ViewData["Title"] = "Panel";
    Layout = "_Layout"; 

    
    var userName = "Gość";
    var userEmail = ""; 
    if (User.Identity?.IsAuthenticated == true)
    {
        userName = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value ?? User.Identity.Name ?? "Użytkownik";
        
        
    }
    
    var lastLoginDateString = User.Identity?.IsAuthenticated == true ? "13.04.2023, 08:15" : "";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">@ViewData["Title"]</h1>
            @if (User.Identity?.IsAuthenticated == true)
            {
                <p class="text-muted">
                    Witaj, @userName.
                    @if (!string.IsNullOrEmpty(lastLoginDateString))
                    {
                        @:Ostatnie logowanie: @lastLoginDateString
                    }
                </p>
            }
        </div>
        <div>
            <span class="badge bg-primary me-2">Sklep: Warszawa Centrum</span> 
            @if (User.IsInRole("Admin"))
            {
                <a asp-controller="PortalTexts" asp-action="Index" class="btn btn-sm btn-dark me-2">
                    <i class="bi bi-pencil-square"></i> Teksty
                </a>
            }
            <button class="btn btn-sm btn-outline-secondary">
                <i class="bi bi-gear"></i> Ustawienia
            </button>
        </div>
    </div>

    
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Dzisiejsza sprzedaż</h6>
                            <h3 class="mb-0">@Model.DzisiejszaSprzedaz</h3>
                            <small class="text-success">
                                <i class="bi bi-arrow-up"></i> 12% więcej niż wczoraj 
                            </small>
                        </div>
                        <div class="bg-primary bg-opacity-10 p-3 rounded">
                            <i class="bi bi-cart text-primary fs-3"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Zamówienia do realizacji</h6>
                            <h3 class="mb-0">@Model.ZamowieniaDoRealizacji</h3>
                            <small class="text-danger">
                                <i class="bi bi-arrow-up"></i> 3 nowe od wczoraj 
                            </small>
                        </div>
                        <div class="bg-warning bg-opacity-10 p-3 rounded">
                            <i class="bi bi-box-seam text-warning fs-3"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Produkty na wyczerpaniu</h6>
                            <h3 class="mb-0">@Model.ProduktyNaWyczerpaniu</h3>
                            <small class="text-danger">
                                <i class="bi bi-exclamation-triangle"></i> Wymaga uwagi
                            </small>
                        </div>
                        <div class="bg-danger bg-opacity-10 p-3 rounded">
                            <i class="bi bi-archive text-danger fs-3"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Dzisiejsi klienci</h6>
                            <h3 class="mb-0">@Model.DzisiejsiKlienci</h3>
                            <small class="text-success">
                                <i class="bi bi-arrow-up"></i> 8% więcej niż wczoraj 
                            </small>
                        </div>
                        <div class="bg-success bg-opacity-10 p-3 rounded">
                            <i class="bi bi-people text-success fs-3"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
    <div class="row g-4">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Ostatnie zamówienia</h5>
                    <a asp-controller="Zamowienia" asp-action="Index" class="btn btn-sm btn-outline-primary">Zobacz wszystkie</a>
                </div>
                <div class="card-body p-0">
                    @if (Model.OstatnieZamowienia != null && Model.OstatnieZamowienia.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Klient</th>
                                        <th>Status</th>
                                        <th>Data</th>
                                        <th>Wartość</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var zamowienie in Model.OstatnieZamowienia)
                                    {
                                        <tr>
                                            <td>#ORD-@zamowienie.Id</td>
                                            <td>@zamowienie.ImieZamawiajacego @zamowienie.NazwiskoZamawiajacego</td>
                                            <td>
                                                <span class="badge @((zamowienie.Status == StatusZamowienia.Nowe || zamowienie.Status == StatusZamowienia.PrzyjeteDoRealizacji) ? "bg-info text-dark" : zamowienie.Status == StatusZamowienia.WRealizacji ? "bg-warning text-dark" : zamowienie.Status == StatusZamowienia.Wyslane ? "bg-primary" : zamowienie.Status == StatusZamowienia.Zrealizowane ? "bg-success" : zamowienie.Status == StatusZamowienia.Anulowane ? "bg-danger" : "bg-secondary")">
                                                    @Html.DisplayFor(modelItem => zamowienie.Status)
                                                </span>
                                            </td>
                                            <td>@zamowienie.DataZlozenia.ToString("dd.MM.yyyy")</td>
                                            <td class="text-end">@zamowienie.LacznaWartosc.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</td>
                                            <td>
                                                <a asp-controller="Zamowienia" asp-action="Details" asp-route-id="@zamowienie.Id" class="btn btn-sm btn-outline-secondary" title="Szczegóły">
                                                    <i class="bi bi-eye"></i>
                                                </a>
                                                <a asp-controller="Zamowienia" asp-action="Edit" asp-route-id="@zamowienie.Id" class="btn btn-sm btn-outline-primary ms-1" title="Edytuj">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center text-muted">Brak ostatnich zamówień do wyświetlenia.</div>
                    }
                </div>
            </div>

            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Sprzedaż w ostatnim tygodniu</h5>
                </div>
                <div class="card-body">
                    @if (Model.SprzedazTygodniowaChartData != null && Model.SprzedazTygodniowaChartData.Labels.Any())
                    {
                        <div class="chart-container" style="position: relative; height:300px; width:100%">
                            <canvas id="salesChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 300px;">
                            <div class="text-center text-muted">
                                <i class="bi bi-bar-chart-line fs-1"></i>
                                <p class="mt-2">Brak danych do wyświetlenia wykresu sprzedaży tygodniowej.</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Ogłoszenia</h5>
    @if (User.IsInRole("Admin")) 
    {
        <a asp-controller="Ogloszenia" asp-action="Create" class="btn btn-sm btn-outline-success">
            <i class="bi bi-plus-circle"></i> Dodaj nowe
        </a>
    }
</div>
                <div class="card-body">
                    @if (Model.Ogloszenia != null && Model.Ogloszenia.Any())
                    {
                        @foreach (var ogloszenie in Model.Ogloszenia)
                        {
                            var alertClass = ogloszenie.Typ switch
                            {
                                TypOgloszenia.Informacja => "alert-info",
                                TypOgloszenia.Sukces => "alert-success",
                                TypOgloszenia.Ostrzezenie => "alert-warning",
                                TypOgloszenia.Niebezpieczenstwo => "alert-danger",
                                _ => "alert-secondary"
                            };
                            <div class="alert @alertClass @(ogloszenie == Model.Ogloszenia.Last() ? "mb-0" : "mb-3")">
                                <h6 class="alert-heading">@ogloszenie.Tytul</h6>
                                <p class="mb-0">@ogloszenie.Tresc</p>
                                <small class="text-muted">@ogloszenie.DataPublikacji.ToString("dd.MM.yyyy") - @ogloszenie.Dzial</small>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Brak aktualnych ogłoszeń.</p>
                    }
                </div>
            </div>

            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Moje zadania</h5>
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <a asp-controller="Zadania" asp-action="Create" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-plus"></i> Dodaj
                        </a>
                    }
                </div>
                <div class="card-body">
                    @if (Model.MojeZadania != null && Model.MojeZadania.Any())
                    {
                        @foreach (var zadanie in Model.MojeZadania)
                        {
                            <div class="form-check mb-3 d-flex align-items-center justify-content-between">
                                <div class="flex-grow-1">
                                    <form asp-controller="Zadania" asp-action="ToggleWykonane" asp-route-id="@zadanie.Id" method="post" class="d-inline me-2" onchange="this.submit()">
                                        @Html.AntiForgeryToken() 
                                        <input class="form-check-input" type="checkbox" id="task-@zadanie.Id" name="czyWykonane" value="true" checked="@zadanie.CzyWykonane" />
                                        <label class="form-check-label @(zadanie.CzyWykonane ? "text-muted text-decoration-line-through" : "")" for="task-@zadanie.Id">
                                            @zadanie.Tytul
                                        </label>
                                    </form>
                                </div>
                                <div class="text-nowrap">
                                    @if (zadanie.TerminWykonania.HasValue)
                                    {
                                        var termin = zadanie.TerminWykonania.Value;
                                        var dzis = DateTime.Today;
                                        string terminText = termin.ToString("dd.MM.yyyy"); 
                                        string terminColor = "text-muted";

                                        if (termin.Date < dzis && !zadanie.CzyWykonane)
                                        {
                                            terminColor = "text-danger fw-bold";
                                            
                                            
                                        }
                                        else if (termin.Date == dzis)
                                        {
                                            terminText = "Dziś";
                                            terminColor = zadanie.CzyWykonane ? "text-muted" : "text-danger";
                                        }
                                        else if (termin.Date == dzis.AddDays(1))
                                        {
                                            terminText = "Jutro";
                                            terminColor = zadanie.CzyWykonane ? "text-muted" : "text-warning";
                                        }
                                        else if (termin.Date == dzis.AddDays(-1))
                                        {
                                            terminText = "Wczoraj";
                                            
                                        }
                                        

                                        <small class="@terminColor me-2">@terminText</small>
                                    }
                                    @if (zadanie.CzyWykonane || User.IsInRole("Admin"))
                                    {
                                        <form asp-controller="Zadania" asp-action="Delete" asp-route-id="@zadanie.Id" method="post" class="d-inline" onsubmit="return confirm(\"Czy na pewno chcesz usunąć to zadanie?\");">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-sm btn-outline-danger p-0 px-1" title="Usuń zadanie">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Brak przypisanych zadań do wykonania.</p>
                    }
                </div>
            </div>

            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Nadchodzące wydarzenia</h5>
                </div>
                <div class="card-body">
                    @if (Model.NadchodzaceWydarzenia != null && Model.NadchodzaceWydarzenia.Any())
                    {
                        @foreach (var wydarzenie in Model.NadchodzaceWydarzenia)
                        {
                            var bgColorClass = wydarzenie.Typ switch
                            {
                                TypWydarzenia.Szkolenie => "bg-primary",
                                TypWydarzenia.Inwentaryzacja => "bg-danger",
                                TypWydarzenia.Spotkanie => "bg-success",
                                TypWydarzenia.Konferencja => "bg-info",
                                TypWydarzenia.Firmowe => "bg-purple", 
                                _ => "bg-secondary"
                            };
                            var textColorClass = (wydarzenie.Typ == TypWydarzenia.Szkolenie || wydarzenie.Typ == TypWydarzenia.Spotkanie || wydarzenie.Typ == TypWydarzenia.Firmowe) ? "text-blue" : "text-dark"; 

                            <div class="d-flex @(wydarzenie == Model.NadchodzaceWydarzenia.Last() ? "" : "mb-3")">
                                <div class="flex-shrink-0 @bgColorClass @textColorClass bg-opacity-10 p-2 rounded text-center" style="width: 60px;">
                                    <div class="fw-bold">@wydarzenie.DataRozpoczecia.ToString("dd")</div>
                                    <small>@wydarzenie.DataRozpoczecia.ToString("MMM", new System.Globalization.CultureInfo("pl-PL")).ToUpper()</small>
                                </div>
                                <div class="ms-3">
                                    <h6 class="mb-1">@wydarzenie.Nazwa</h6>
                                    <p class="text-muted small mb-0">
                                        @wydarzenie.DataRozpoczecia.ToString("HH:mm")
                                        @if (wydarzenie.DataZakonczenia.HasValue && wydarzenie.DataZakonczenia.Value.Date == wydarzenie.DataRozpoczecia.Date)
                                        {
                                            @: - @wydarzenie.DataZakonczenia.Value.ToString("HH:mm")
                                        }
                                        else if (wydarzenie.DataZakonczenia.HasValue)
                                        {
                                            @: - @wydarzenie.DataZakonczenia.Value.ToString("dd.MM HH:mm") 
                                        }
                                        @if (!string.IsNullOrEmpty(wydarzenie.Lokalizacja))
                                        {
                                            @:, @wydarzenie.Lokalizacja
                                        }
                                    </p>
                                    @if (!string.IsNullOrEmpty(wydarzenie.Opis))
                                    {
                                        <p class="text-muted small mb-0 fst-italic">@wydarzenie.Opis</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Brak nadchodzących wydarzeń.</p>
                    }
                </div>
            </div>
        </div>
        </div>
    </div>
</div>

@section Scripts {

    @if (Model.SprzedazTygodniowaChartData != null && Model.SprzedazTygodniowaChartData.Labels.Any())
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const salesChartCtx = document.getElementById("salesChart");
                if (salesChartCtx) { 
                    const salesChart = new Chart(salesChartCtx.getContext("2d"), {
                        type: "line",
                        data: {
                            labels: @Html.Raw(Json.Serialize(Model.SprzedazTygodniowaChartData.Labels)),
                            datasets: [{
                                label: "Sprzedaż (zł)",
                                data: @Html.Raw(Json.Serialize(Model.SprzedazTygodniowaChartData.Values)),
                                borderColor: "rgba(75, 192, 192, 1)",
                                backgroundColor: "rgba(75, 192, 192, 0.2)",
                                borderWidth: 2,
                                tension: 0.2, 
                                fill: false
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value, index, values) {
                                            return new Intl.NumberFormat("pl-PL", { style: "currency", currency: "PLN" }).format(value);
                                        }
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: true,
                                    position: "top",
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || "";
                                            if (label) {
                                                label += ": ";
                                            }
                                            if (context.parsed.y !== null) {
                                                label += new Intl.NumberFormat("pl-PL", { style: "currency", currency: "PLN" }).format(context.parsed.y);
                                            }
                                            return label;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            });
        </script>
    }
}
