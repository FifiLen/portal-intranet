@model Intranet.Models.DashboardViewModel
@using Intranet.Models
@using System.Linq
@using System.Security.Claims

@{
    /* ────────────── META ────────────── */
    ViewData["Title"] = "Panel";
    Layout             = "_Layout";

    /* ────────────── Dane użytkownika ────────────── */
    var userName = "Gość";
    if (User.Identity?.IsAuthenticated == true)
    {
        userName = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value
                   ?? User.Identity.Name
                   ?? "Użytkownik";
    }

    /* przykładowa data ostatniego logowania — podstaw realną, jeśli przechowujesz */
    var lastLoginDateString = User.Identity?.IsAuthenticated == true ? "13.04.2025, 08:15" : "";
}

<div class="container-fluid py-4">
    <!-- Nagłówek -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">@ViewData["Title"]</h1>
            @if (User.Identity?.IsAuthenticated == true)
            {
                <p class="text-muted">
                    Witaj, @userName.
                    @if (!string.IsNullOrEmpty(lastLoginDateString))
                    {
                        @:Ostatnie logowanie: @lastLoginDateString
                    }
                </p>
            }
        </div>
        <div>
            <span class="badge bg-primary me-2">Sklep: Warszawa&nbsp;Centrum</span>
            @if (User.IsInRole("Admin"))
            {
                <a asp-controller="PortalTexts" asp-action="Index" class="btn btn-sm btn-dark me-2">
                    <i class="bi bi-pencil-square"></i> Teksty
                </a>
            }
            <button class="btn btn-sm btn-outline-secondary">
                <i class="bi bi-gear"></i> Ustawienia
            </button>
        </div>
    </div>

    <!-- Kafle statystyk -->
    <div class="row g-3 mb-4">
        @* Dzisiejsza sprzedaż *@
        <partial name="_StatTile" model="(@Model.DzisiejszaSprzedaz, 'Dzisiejsza sprzedaż', 'bi-cart', 'text-success', '12% więcej niż wczoraj')" />

        @* Zamówienia do realizacji *@
        <partial name="_StatTile" model="(@Model.ZamowieniaDoRealizacji, 'Zamówienia do realizacji', 'bi-box-seam', 'text-danger', '3 nowe od wczoraj')" />

        @* Produkty na wyczerpaniu *@
        <partial name="_StatTile" model="(@Model.ProduktyNaWyczerpaniu, 'Produkty na wyczerpaniu', 'bi-archive', 'text-danger', 'Wymaga uwagi')" />

        @* Dzisiejsi klienci *@
        <partial name="_StatTile" model="(@Model.DzisiejsiKlienci, 'Dzisiejsi klienci', 'bi-people', 'text-success', '8% więcej niż wczoraj')" />
    </div>

    <div class="row g-4">
        <!-- Lewa kolumna -->
        <div class="col-lg-8">
            @* Ostatnie zamówienia *@
            <partial name="_LastOrders" model="Model.OstatnieZamowienia" />

            @* Wykres sprzedaży tygodniowej *@
            <partial name="_SalesChart" model="Model.SprzedazTygodniowaChartData" />
        </div>

        <!-- Prawa kolumna -->
        <div class="col-lg-4">
            @* Ogłoszenia *@
            <partial name="_Announcements" model="Model.Ogloszenia" />

            @* Moje zadania *@
            <partial name="_Tasks" model="Model.MojeZadania" />

            @* Nadchodzące wydarzenia *@
            <partial name="_Events" model="Model.NadchodzaceWydarzenia" />
        </div>
    </div>
</div>

@section Scripts {
    @* tylko gdy są dane do wykresu *@
    @if (Model.SprzedazTygodniowaChartData?.Labels.Any() == true)
    {
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const ctx = document.getElementById('salesChart');
                if (!ctx) return;

                new Chart(ctx.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: @Html.Raw(Json.Serialize(Model.SprzedazTygodniowaChartData.Labels)),
                        datasets: [{
                            label: 'Sprzedaż (zł)',
                            data: @Html.Raw(Json.Serialize(Model.SprzedazTygodniowaChartData.Values)),
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, .15)',
                            borderWidth: 2,
                            tension: .25,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: v => new Intl.NumberFormat('pl-PL', { style: 'currency', currency: 'PLN' }).format(v)
                                }
                            }
                        },
                        plugins: {
                            legend: { display: true, position: 'top' },
                            tooltip: {
                                callbacks: {
                                    label: ctx => new Intl.NumberFormat('pl-PL', { style: 'currency', currency: 'PLN' }).format(ctx.parsed.y)
                                }
                            }
                        }
                    }
                });
            });
        </script>
    }
}
